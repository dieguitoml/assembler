package ast;

import java.util.List;

public class AccesoArray extends E {
    private final ASTNode arrayBase;  
    private final List<E> indices;   
    //private boolean isAccess;
    private Tipo t;
    
    public AccesoArray(ASTNode arrayBase, List<E> indice) {
        this.arrayBase = arrayBase;
        this.indices = indice;
        //this.isAccess = isAccess;
    }
    
    
    public ASTNode getArrayBase() {
        return arrayBase;
    }

    public List<E> getIndices() {
        return indices;
    }
    
    @Override
    public Tipo getType() {
    	return this.t.getType();
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("AccesoArray(");
        sb.append(arrayBase != null ? arrayBase.toString() : "null");
        if (indices != null) {
            for (int i = 0; i < indices.size(); i++) {
                sb.append(indices.get(i) != null ? indices.get(i).toString() : "null");
                if (i < indices.size() - 1) {
                    sb.append(", ");
                }
            }
        } else {
            sb.append("null");
        }
        sb.append(")");
        return sb.toString();
    }
    
	@Override
	public KindE kind() {
		return KindE.ACCESO_ARRAY;
	}

	@Override
	public void generate_code_instr(StringBuilder code_builder, int identado) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void generate_code_desig(StringBuilder code_builder, int identado) {
		// TODO Auto-generated method stub
		
	}
	
	@Override
	public void generate_code_expr_param(StringBuilder code_builder, int identado) {
		// TODO Auto-generated method stub
		// TODO Auto-generated method stub
				String indent = StringUtils.generate_identation(identado);
				
				code_builder.append(indent + "global.get $MP\n");
				code_builder.append(indent + "i32.const " + this.desplazamiento + "\n");
				code_builder.append(indent + "i32.add\n");
				((E)arrayBase).generate_code_expr_mem_param(code_builder, identado,false);
				
				code_builder.append(indent + "i32.const 0\n");//Para poder generalizar tambien el primer caso
				for(int i = 0; i < indices.size()-1; i++) {
					E idx = indices.get(i);
					idx.generate_code_expr_param(code_builder, identado);
					int dimension = Integer.parseInt(((TipoArray) arrayBase).getDimension().get(i+1).getTamDimension().num());
					code_builder.append(indent + "i32.const " + dimension + "\n");
					code_builder.append(indent + "i32.mul\n");
					code_builder.append(indent + "i32.add\n");
				}
				E idx = indices.get(indices.size()-1);
				idx.generate_code_expr_param(code_builder, identado,false);
				code_builder.append(indent + "i32.add\n");
			    code_builder.append(indent + "i32.const 4\n");
			    code_builder.append(indent + "i32.mul\n");

			    code_builder.append(indent + "i32.add\n");
				code_builder.append(indent + "i32.load\n");
				code_builder.append(indent + "i32.store\n");
	}
	
	@Override 
	public void generate_code_expr_mem_param(StringBuilder code_builder, int identado) {
		// TODO Auto-generated method stub
		String indent = StringUtils.generate_identation(identado);
		
		code_builder.append(indent + "global.get $MP\n");
		code_builder.append(indent + "i32.const " + this.desplazamiento + "\n");
		code_builder.append(indent + "i32.add\n");
		((E)arrayBase).generate_code_expr_mem_param(code_builder, identado,false);
		
		code_builder.append(indent + "i32.const 0\n");//Para poder generalizar tambien el primer caso
		for(int i = 0; i < indices.size()-1; i++) {
			E idx = indices.get(i);
			idx.generate_code_expr_param(code_builder, identado,false);
			int dimension = Integer.parseInt(((TipoArray) arrayBase).getDimension().get(i+1).getTamDimension().num());
			code_builder.append(indent + "i32.const " + dimension + "\n");
			code_builder.append(indent + "i32.mul\n");
			code_builder.append(indent + "i32.add\n");
		}
		E idx = indices.get(indices.size()-1);
		idx.generate_code_expr_param(code_builder, identado,false);
		code_builder.append(indent + "i32.add\n");
	    code_builder.append(indent + "i32.const 4\n");
	    code_builder.append(indent + "i32.mul\n");

	    code_builder.append(indent + "i32.add\n");
		code_builder.append(indent + "i32.store\n");
	}

	@Override
	public void generate_code_expr(StringBuilder code_builder, int identado) {
		String indent = StringUtils.generate_identation(identado);
		((E)arrayBase).generate_code_expr_mem(code_builder, identado);
		
		code_builder.append(indent + "i32.const 0\n");//Para poder generalizar tambien el primer caso
		for(int i = 0; i < indices.size()-1; i++) {
			E idx = indices.get(i);
			idx.generate_code_expr(code_builder, identado);
			int dimension = Integer.parseInt(((TipoArray) arrayBase).getDimension().get(i+1).getTamDimension().num());
			code_builder.append(indent + "i32.const " + dimension + "\n");
			code_builder.append(indent + "i32.mul\n");
			code_builder.append(indent + "i32.add\n");
		}
		E idx = indices.get(indices.size()-1);
		idx.generate_code_expr(code_builder, identado);
		code_builder.append(indent + "i32.add\n");
	    code_builder.append(indent + "i32.const 4\n");
	    code_builder.append(indent + "i32.mul\n");

	    code_builder.append(indent + "i32.add\n");
		code_builder.append(indent + "i32.load\n");
	}

	@Override
	public void generate_code_expr_mem(StringBuilder code_builder, int identado) {
		String indent = StringUtils.generate_identation(identado);
		((E)arrayBase).generate_code_expr_mem(code_builder, identado);

		code_builder.append(indent + "i32.const 0\n");
		for(int i = 0; i < indices.size()-1; i++) {
			E idx = indices.get(i);
			idx.generate_code_expr(code_builder, identado);
			int dimension = Integer.parseInt(((TipoArray) arrayBase).getDimension().get(i+1).getTamDimension().num());
			code_builder.append(indent + "i32.const " + dimension + "\n");
			code_builder.append(indent + "i32.mul\n");
			code_builder.append(indent + "i32.add\n");
		}
		E idx = indices.get(indices.size()-1);
		idx.generate_code_expr(code_builder, identado);
		code_builder.append(indent + "i32.add\n");
	    code_builder.append(indent + "i32.const 4\n");
	    code_builder.append(indent + "i32.mul\n");
	    code_builder.append(indent + "i32.add\n");
	}

	@Override
	public void asignarTamanosMemoriaTipos() {
		// TODO Auto-generated method stub
		this.arrayBase.asignarTamanosMemoriaTipos();
	}

	@Override
	public int calcularMemoria() {
		// TODO Auto-generated method stub
		return 0;
		
	}

	@Override
	public int asingarDesplazamiento(int dirPadre) {
		desplazamiento = dirPadre;
	    return dirPadre;
	}

	@Override
	public void bind() {
		arrayBase.bind();
		for(E exp: indices) {
			exp.bind();
		}
	}

	@Override
	public void vinculo(List<ASTNode> vinculo) {
		arrayBase.vinculo(vinculo);
	}
	
	@Override
	public void chequea() {
		// TODO Auto-generated method stub
		for(E i : indices) {//Tipamos los campos
			i.chequea();
			if(!(i.getType().equals(new TipoInt()))) {
				ASTNode.errorTipado  = true;
				System.out.println("Los campos del array tienen que ser de tipo entero");
			}
		}
		arrayBase.chequea();
		this.t = (Tipo) (((((Identificador)arrayBase).getReferencia().get(0)).getType()));
	}
	@Override
	public void bind_externo() {
		// TODO Auto-generated method stub
		this.arrayBase.bind_externo();
	}
    
}
